name: Deploy BE to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Specify the image tag (git SHA) to deploy. Leave blank to build from the latest `develop` branch commit.'
        required: false
        type: string

permissions:
  contents: read
  packages: write

jobs:
  # JOB 1: The Brain. It decides the tag and if a build is needed.
  resolve-image:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
      build_needed: ${{ steps.get_tag.outputs.build_needed }}
    steps:
      - id: get_tag
        run: |
          if [[ -n "${{ inputs.image_tag }}" ]]; then
            echo "Manual Run: Re-deploying specified tag."
            echo "tag=${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
            echo "build_needed=false" >> $GITHUB_OUTPUT
          else
            echo "Push or Manual Run w/o tag: Building latest commit."
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "build_needed=true" >> $GITHUB_OUTPUT
          fi

  # JOB 2: The Builder. It only runs when the brain tells it to.
  build:
    needs: resolve-image
    if: needs.resolve-image.outputs.build_needed == 'true'
    uses: ./.github/workflows/build.yaml
    with:
      image_tag: ${{ needs.resolve-image.outputs.tag }}
    secrets: inherit

  # JOB 3: The Deployer. It always runs and gets its tag from the brain.
  deploy:
    needs: [ resolve-image, build ]
    if: always()
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      packages: read
    steps:
      - name: Checkout almonium-infra repository
        uses: actions/checkout@v4
        with:
          repository: almonium-platform/almonium-infra
          path: almonium-infra
          ssh-key: ${{ secrets.INFRA_REPO_CHECKOUT_KEY }}

      - name: Set up SSH Agent for Ansible to connect to VM
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.CLOUD_KEY }}

      - name: Install Ansible and Docker collection
        run: |
          python -m venv ansible_venv
          source ansible_venv/bin/activate
          echo "Installing Ansible core..."
          pip install ansible
          echo "Ansible core version:"
          ansible --version
          echo "Installing community.docker collection..."
          ansible-galaxy collection install community.docker
          echo "Verifying docker modules are available (optional check)..."
          ansible-doc -t module -l | grep docker_compose

      - name: Run Ansible Playbook for Staging Deployment
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          source ansible_venv/bin/activate
          cd almonium-infra/ansible
          
          TARGET_GROUP="staging_servers"

          ansible-playbook playbook-deploy-almonium-be.yaml \
            -i inventory/hosts.ini \
            --limit "${TARGET_GROUP}" \
            --vault-password-file <(echo "$ANSIBLE_VAULT_PASSWORD") \
            --extra-vars "DEPLOY_IMAGE_TAG=${{ needs.resolve-image.outputs.tag }}" \
            --extra-vars "DEPLOY_GH_ACTOR=${{ github.actor }}" \
            --extra-vars "DEPLOY_GH_TOKEN=${{ secrets.GITHUB_TOKEN }}"
