name: Build & Deploy BE to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: 'maven'

      - name: Build JAR with Maven
        run: mvn -B package -Dmaven.test.skip=true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ghcr.io/almonium-platform/almonium-be:${{ github.sha }}
            ghcr.io/almonium-platform/almonium-be:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          builder: ${{ steps.buildx.outputs.name }}

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      packages: read
    steps:
      - name: Checkout almonium-infra repository
        uses: actions/checkout@v4
        with:
          repository: almonium-platform/almonium-infra
          path: almonium-infra
          ssh-key: ${{ secrets.INFRA_REPO_CHECKOUT_KEY }}

      - name: Set up SSH Agent for Ansible to connect to VM
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.CLOUD_KEY }}

      - name: Install Ansible and Docker collection
        run: |
          python -m venv ansible_venv
          source ansible_venv/bin/activate
          echo "Installing Ansible core..."
          pip install ansible
          echo "Ansible core version:"
          ansible --version
          echo "Installing community.docker collection..."
          ansible-galaxy collection install community.docker
          echo "Verifying docker modules are available (optional check)..."
          ansible-doc -t module -l | grep docker_compose

      - name: Run Ansible Playbook for Staging Deployment
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
          RESOLVED_TARGET_HOST_GROUP: ${{ vars.TARGET_HOST_GROUP || format('{0}_servers', github.environment) }}
        run: |
          source ansible_venv/bin/activate
          cd almonium-infra/ansible

          ansible-playbook playbook-deploy-almonium-be.yaml \
            -i inventory/hosts.ini \
            --limit "${{ github.environment }}_servers" \
            --extra-vars "DEPLOY_GH_ACTOR='${{ github.actor }}'" \
            --extra-vars "DEPLOY_GH_TOKEN='${{ secrets.GITHUB_TOKEN }}'" \
            --extra-vars "DEPLOY_IMAGE_TAG='${{ github.sha }}'" \
            --extra-vars "DEPLOY_ENVIRONMENT=${{ github.environment }}" \
            --extra-vars "API_HOSTNAME='${{ vars.API_HOSTNAME }}'" \
            --extra-vars "CONF_LOCAL_PORT='${{ vars.LOCAL_PORT }}'" \
            --extra-vars "CONF_DEBUG_PORT='${{ vars.DEBUG_PORT }}'" \
            --extra-vars "CONF_SPRING_PROFILE='${{ vars.SPRING_PROFILE }}'" \
            --extra-vars "CONF_JWT_SECRET='${{ secrets.JWT_SECRET }}'" \
            --extra-vars "CONF_DB_NAME='${{ vars.DB_NAME }}'" \
            --extra-vars "CONF_DB_HOST='${{ secrets.DB_HOST }}'" \
            --extra-vars "CONF_DB_PORT='${{ vars.DB_PORT }}'" \
            --extra-vars "CONF_DB_SCHEMA='${{ vars.DB_SCHEMA }}'" \
            --extra-vars "CONF_DB_USERNAME='${{ secrets.DB_USERNAME }}'" \
            --extra-vars "CONF_DB_PASSWORD='${{ secrets.DB_PASSWORD }}'" \
            --extra-vars "CONF_RAPID_API_KEY='${{ secrets.RAPID_API_KEY }}'" \
            --extra-vars "CONF_WORDNIK_KEY='${{ secrets.WORDNIK_KEY }}'" \
            --extra-vars "CONF_YANDEX_KEY='${{ secrets.YANDEX_KEY }}'" \
            --extra-vars "CONF_OPENAI_KEY='${{ secrets.OPENAI_KEY }}'" \
            --extra-vars "CONF_GEMINI_API_KEY='${{ secrets.GEMINI_API_KEY }}'" \
            --extra-vars "CONF_STRIPE_KEY='${{ secrets.STRIPE_KEY }}'" \
            --extra-vars "CONF_STRIPE_WEBHOOK_SECRET='${{ secrets.STRIPE_WEBHOOK_SECRET }}'" \
            --extra-vars "CONF_STREAM_KEY='${{ secrets.STREAM_KEY }}'" \
            --extra-vars "CONF_STREAM_SECRET='${{ secrets.STREAM_SECRET }}'" \
            --extra-vars "CONF_GOOGLE_PROJECT_ID='${{ vars.GOOGLE_PROJECT_ID }}'" \
            --extra-vars "CONF_GOOGLE_SERVICE_ACCOUNT_KEY_BASE64='${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY_BASE64 }}'" \
            --extra-vars "CONF_FIREBASE_STORAGE_BUCKET='${{ vars.FIREBASE_STORAGE_BUCKET }}'" \
            --extra-vars "CONF_GOOGLE_ID='${{ vars.GOOGLE_ID }}'" \
            --extra-vars "CONF_GOOGLE_SECRET='${{ secrets.GOOGLE_SECRET }}'" \
            --extra-vars "CONF_FACEBOOK_ID='${{ vars.FACEBOOK_ID }}'" \
            --extra-vars "CONF_FACEBOOK_SECRET='${{ secrets.FACEBOOK_SECRET }}'" \
            --extra-vars "CONF_APPLE_ID='${{ vars.APPLE_ID }}'" \
            --extra-vars "CONF_APPLE_SECRET='${{ secrets.APPLE_SECRET }}'" \
            --extra-vars "CONF_RABBITMQ_HOST='${{ vars.RABBITMQ_HOST }}'" \
            --extra-vars "CONF_RABBITMQ_USER='${{ secrets.RABBITMQ_USER }}'" \
            --extra-vars "CONF_RABBITMQ_PASS='${{ secrets.RABBITMQ_PASS }}'" \
            --extra-vars "CONF_RABBITMQ_PORT='${{ vars.RABBITMQ_PORT }}'" \
            --extra-vars "CONF_MAIL_USERNAME='${{ secrets.MAIL_USERNAME }}'" \
            --extra-vars "CONF_MAIL_PASSWORD='${{ secrets.MAIL_PASSWORD }}'"
