name: Reusable Deployment Orchestrator

on:
  workflow_call:
    inputs:
      environment_name:
        required: true
        type: string
      source_branch:
        required: true
        type: string
      ansible_target_group:
        required: true
        type: string
      image_tag:
        required: false
        type: string
    secrets:
      INFRA_REPO_CHECKOUT_KEY:
        required: true
      CLOUD_KEY:
        required: true
      ANSIBLE_VAULT_PASSWORD:
        required: true

permissions:
  contents: read
  packages: write

jobs:
  # JOB 1: The Brain. From the old 'reusable-build-pipeline.yaml'.
  resolve-image:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
      build_needed: ${{ steps.get_tag.outputs.build_needed }}
    steps:
      - uses: actions/checkout@v4
        if: inputs.image_tag == ''
        with:
          ref: ${{ inputs.source_branch }}
      - id: get_tag
        run: |
          if [[ -n "${{ inputs.image_tag }}" ]]; then
            echo "Manual Run: Re-deploying specified tag."
            echo "tag=${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
            echo "build_needed=false" >> $GITHUB_OUTPUT
          else
            echo "Manual Run w/o tag: Building latest commit from main."
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "build_needed=true" >> $GITHUB_OUTPUT
          fi

  # JOB 2: The Builder. Logic from the old 'build.yaml'.
  build:
    needs: resolve-image
    if: needs.resolve-image.outputs.build_needed == 'true'
    runs-on: ubuntu-latest
    # Job-level permissions are still good practice (Principle of Least Privilege)
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17 and Maven
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - name: Build JAR with Maven
        run: mvn -B package -Dmaven.test.skip=true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically available
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ghcr.io/almonium-platform/almonium-be:${{ needs.resolve-image.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # JOB 3: The Deployer. Logic from the old 'reusable-deploy.yaml'.
  deploy:
    needs: [ resolve-image, build ]
    if: always() # Always run this job, even if build was skipped
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    permissions:
      packages: read # This job only needs to read packages
    steps:
      - name: Checkout almonium-infra repository
        uses: actions/checkout@v4
        with:
          repository: almonium-platform/almonium-infra
          path: almonium-infra
          ssh-key: ${{ secrets.INFRA_REPO_CHECKOUT_KEY }}
      - name: Set up SSH Agent for Ansible to connect to VM
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.CLOUD_KEY }}
      - name: Install Ansible and Docker collection
        run: |
          python -m venv ansible_venv
          source ansible_venv/bin/activate
          pip install ansible
          ansible-galaxy collection install community.docker
      - name: Run Ansible Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          source ansible_venv/bin/activate
          cd almonium-infra/ansible
          
          ansible-playbook playbook-deploy-almonium-be.yaml \
            -i inventory/hosts.ini \
            --limit "${{ inputs.ansible_target_group }}" \
            --vault-password-file <(echo "$ANSIBLE_VAULT_PASSWORD") \
            --extra-vars "deploy_environment=${{ inputs.environment_name }}" \
            --extra-vars "deploy_image_tag=${{ needs.resolve-image.outputs.tag }}" \
            --extra-vars "deploy_gh_actor=${{ github.actor }}" \
            --extra-vars "deploy_gh_token=${{ secrets.GITHUB_TOKEN }}"
