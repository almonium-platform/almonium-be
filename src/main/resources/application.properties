spring.datasource.url=jdbc:postgresql://lingua-base.cl8gohkpyf7j.eu-west-2.rds.amazonaws.com:5432/postgres

spring.datasource.username=lingua_master
spring.datasource.password=MythologicalBeast
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate props
spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=none

# Social login provider props
spring.security.oauth2.client.registration.google.clientId=842714080763-hj64thg1sghaubbg9m6qd288mbv09li6.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=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
#spring.security.oauth2.client.registration.facebook.clientId=<your-client-id>
#spring.security.oauth2.client.registration.facebook.clientSecret=<your-client-secret>
#spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:8081/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect
# For detailed logging during development
#logging.level.com=TRACE
logging.level.org.springframework=TRACE
#logging.level.org.hibernate.SQL=TRACE
#logging.level.org.hibernate.type=TRACE

